{"ast":null,"code":"// Initial state object for the appointment booking form\nexport const initialState = {\n  doctors: [],\n  // List of all doctors fetched from backend or API\n  departments: [],\n  // Unique list of departments extracted from doctors list\n  selectedDepartment: '',\n  // Department selected by the user in the UI\n  selectedDoctorId: '',\n  // ID of the doctor selected by the user\n  selectedDoctor: null,\n  // Full doctor object corresponding to selectedDoctorId\n  availableSlots: [],\n  // Array of available appointment slots for the selected doctor and date\n  selectedDate: '',\n  // Date selected for the appointment\n  selectedTime: '',\n  // Time slot selected for the appointment\n  comments: '',\n  // Any additional comments entered by the user\n  reportFile: null // Uploaded report file by the user (optional)\n};\n\n// Reducer function to manage appointment booking state updates based on dispatched actions\nexport function appointmentReducer(state, action) {\n  switch (action.type) {\n    // Action to set the full list of doctors and extract unique departments from them\n    case 'SET_DOCTORS':\n      return {\n        ...state,\n        doctors: action.payload,\n        // Update doctors array with fetched doctors\n        // Extract unique department names from doctors list using Set, then convert back to array\n        departments: [...new Set(action.payload.map(doc => doc.department))]\n      };\n\n    // Action to set the selected department when user picks a department\n    case 'SET_DEPARTMENT':\n      return {\n        ...state,\n        selectedDepartment: action.payload,\n        // Update the selected department string\n        // Reset dependent selections to defaults because department changed\n        selectedDoctorId: '',\n        selectedDate: '',\n        selectedTime: '',\n        selectedDoctor: null,\n        availableSlots: []\n      };\n\n    // Action to set the selected doctor's ID when user chooses a doctor from the filtered list\n    case 'SET_DOCTOR_ID':\n      return {\n        ...state,\n        selectedDoctorId: action.payload,\n        // Store the chosen doctor's ID\n        // Reset dependent selections because doctor changed\n        selectedDate: '',\n        selectedTime: ''\n      };\n\n    // Action to set the full selected doctor object, typically after loading doctor details\n    case 'SET_SELECTED_DOCTOR':\n      return {\n        ...state,\n        selectedDoctor: action.payload // Store doctor object (could include name, specialty, etc.)\n      };\n\n    // Action to set the available appointment slots for the selected doctor & date\n    case 'SET_AVAILABLE_SLOTS':\n      return {\n        ...state,\n        availableSlots: action.payload // Update with new slots array\n      };\n\n    // Action to set the selected appointment date chosen by the user\n    case 'SET_DATE':\n      return {\n        ...state,\n        selectedDate: action.payload,\n        // Store the selected date (string or Date object)\n        selectedTime: '' // Reset selected time when date changes\n      };\n\n    // Action to set the selected appointment time slot chosen by the user\n    case 'SET_TIME':\n      return {\n        ...state,\n        selectedTime: action.payload // Store selected time slot (e.g., '10:00 AM')\n      };\n\n    // Action to update the comments or notes user adds for the appointment\n    case 'SET_COMMENTS':\n      return {\n        ...state,\n        comments: action.payload // Update comments string\n      };\n\n    // Action to set the uploaded report file (for example, a medical report PDF)\n    case 'SET_REPORT':\n      return {\n        ...state,\n        reportFile: action.payload // Store the File object from file input\n      };\n\n    // Action to reset the entire appointment form state back to initial defaults\n    case 'RESET_FORM':\n      return initialState;\n\n    // Default case to return current state if action type is unknown\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["initialState","doctors","departments","selectedDepartment","selectedDoctorId","selectedDoctor","availableSlots","selectedDate","selectedTime","comments","reportFile","appointmentReducer","state","action","type","payload","Set","map","doc","department"],"sources":["/Users/sakshirawat/Desktop/appointmentFrontend/src/reducers/appointmentReducer.jsx"],"sourcesContent":["// Initial state object for the appointment booking form\nexport const initialState = {\n  doctors: [],             // List of all doctors fetched from backend or API\n  departments: [],         // Unique list of departments extracted from doctors list\n  selectedDepartment: '',  // Department selected by the user in the UI\n  selectedDoctorId: '',    // ID of the doctor selected by the user\n  selectedDoctor: null,    // Full doctor object corresponding to selectedDoctorId\n  availableSlots: [],      // Array of available appointment slots for the selected doctor and date\n  selectedDate: '',        // Date selected for the appointment\n  selectedTime: '',        // Time slot selected for the appointment\n  comments: '',            // Any additional comments entered by the user\n  reportFile: null,        // Uploaded report file by the user (optional)\n};\n\n// Reducer function to manage appointment booking state updates based on dispatched actions\nexport function appointmentReducer(state, action) {\n  switch (action.type) {\n\n    // Action to set the full list of doctors and extract unique departments from them\n    case 'SET_DOCTORS':\n      return {\n        ...state,\n        doctors: action.payload, // Update doctors array with fetched doctors\n        // Extract unique department names from doctors list using Set, then convert back to array\n        departments: [...new Set(action.payload.map(doc => doc.department))],\n      };\n\n    // Action to set the selected department when user picks a department\n    case 'SET_DEPARTMENT':\n      return {\n        ...state,\n        selectedDepartment: action.payload, // Update the selected department string\n        // Reset dependent selections to defaults because department changed\n        selectedDoctorId: '',\n        selectedDate: '',\n        selectedTime: '',\n        selectedDoctor: null,\n        availableSlots: [],\n      };\n\n    // Action to set the selected doctor's ID when user chooses a doctor from the filtered list\n    case 'SET_DOCTOR_ID':\n      return {\n        ...state,\n        selectedDoctorId: action.payload, // Store the chosen doctor's ID\n        // Reset dependent selections because doctor changed\n        selectedDate: '',\n        selectedTime: '',\n      };\n\n    // Action to set the full selected doctor object, typically after loading doctor details\n    case 'SET_SELECTED_DOCTOR':\n      return {\n        ...state,\n        selectedDoctor: action.payload, // Store doctor object (could include name, specialty, etc.)\n      };\n\n    // Action to set the available appointment slots for the selected doctor & date\n    case 'SET_AVAILABLE_SLOTS':\n      return {\n        ...state,\n        availableSlots: action.payload, // Update with new slots array\n      };\n\n    // Action to set the selected appointment date chosen by the user\n    case 'SET_DATE':\n      return {\n        ...state,\n        selectedDate: action.payload, // Store the selected date (string or Date object)\n        selectedTime: '', // Reset selected time when date changes\n      };\n\n    // Action to set the selected appointment time slot chosen by the user\n    case 'SET_TIME':\n      return {\n        ...state,\n        selectedTime: action.payload, // Store selected time slot (e.g., '10:00 AM')\n      };\n\n    // Action to update the comments or notes user adds for the appointment\n    case 'SET_COMMENTS':\n      return {\n        ...state,\n        comments: action.payload, // Update comments string\n      };\n\n    // Action to set the uploaded report file (for example, a medical report PDF)\n    case 'SET_REPORT':\n      return {\n        ...state,\n        reportFile: action.payload, // Store the File object from file input\n      };\n\n    // Action to reset the entire appointment form state back to initial defaults\n    case 'RESET_FORM':\n      return initialState;\n\n    // Default case to return current state if action type is unknown\n    default:\n      return state;\n  }\n}\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAG;EAC1BC,OAAO,EAAE,EAAE;EAAc;EACzBC,WAAW,EAAE,EAAE;EAAU;EACzBC,kBAAkB,EAAE,EAAE;EAAG;EACzBC,gBAAgB,EAAE,EAAE;EAAK;EACzBC,cAAc,EAAE,IAAI;EAAK;EACzBC,cAAc,EAAE,EAAE;EAAO;EACzBC,YAAY,EAAE,EAAE;EAAS;EACzBC,YAAY,EAAE,EAAE;EAAS;EACzBC,QAAQ,EAAE,EAAE;EAAa;EACzBC,UAAU,EAAE,IAAI,CAAS;AAC3B,CAAC;;AAED;AACA,OAAO,SAASC,kBAAkBA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAChD,QAAQA,MAAM,CAACC,IAAI;IAEjB;IACA,KAAK,aAAa;MAChB,OAAO;QACL,GAAGF,KAAK;QACRX,OAAO,EAAEY,MAAM,CAACE,OAAO;QAAE;QACzB;QACAb,WAAW,EAAE,CAAC,GAAG,IAAIc,GAAG,CAACH,MAAM,CAACE,OAAO,CAACE,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,CAAC;MACrE,CAAC;;IAEH;IACA,KAAK,gBAAgB;MACnB,OAAO;QACL,GAAGP,KAAK;QACRT,kBAAkB,EAAEU,MAAM,CAACE,OAAO;QAAE;QACpC;QACAX,gBAAgB,EAAE,EAAE;QACpBG,YAAY,EAAE,EAAE;QAChBC,YAAY,EAAE,EAAE;QAChBH,cAAc,EAAE,IAAI;QACpBC,cAAc,EAAE;MAClB,CAAC;;IAEH;IACA,KAAK,eAAe;MAClB,OAAO;QACL,GAAGM,KAAK;QACRR,gBAAgB,EAAES,MAAM,CAACE,OAAO;QAAE;QAClC;QACAR,YAAY,EAAE,EAAE;QAChBC,YAAY,EAAE;MAChB,CAAC;;IAEH;IACA,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGI,KAAK;QACRP,cAAc,EAAEQ,MAAM,CAACE,OAAO,CAAE;MAClC,CAAC;;IAEH;IACA,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGH,KAAK;QACRN,cAAc,EAAEO,MAAM,CAACE,OAAO,CAAE;MAClC,CAAC;;IAEH;IACA,KAAK,UAAU;MACb,OAAO;QACL,GAAGH,KAAK;QACRL,YAAY,EAAEM,MAAM,CAACE,OAAO;QAAE;QAC9BP,YAAY,EAAE,EAAE,CAAE;MACpB,CAAC;;IAEH;IACA,KAAK,UAAU;MACb,OAAO;QACL,GAAGI,KAAK;QACRJ,YAAY,EAAEK,MAAM,CAACE,OAAO,CAAE;MAChC,CAAC;;IAEH;IACA,KAAK,cAAc;MACjB,OAAO;QACL,GAAGH,KAAK;QACRH,QAAQ,EAAEI,MAAM,CAACE,OAAO,CAAE;MAC5B,CAAC;;IAEH;IACA,KAAK,YAAY;MACf,OAAO;QACL,GAAGH,KAAK;QACRF,UAAU,EAAEG,MAAM,CAACE,OAAO,CAAE;MAC9B,CAAC;;IAEH;IACA,KAAK,YAAY;MACf,OAAOf,YAAY;;IAErB;IACA;MACE,OAAOY,KAAK;EAChB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}