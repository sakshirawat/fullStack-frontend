{"ast":null,"code":"var _jsxFileName = \"/Users/sakshirawat/Desktop/appointment/frontend/src/components/ProtectedRoute.jsx\";\n// src/components/ProtectedRoute.jsx\n\nimport React from 'react';\n// Import Navigate component from react-router-dom to programmatically redirect users\nimport { Navigate } from 'react-router-dom';\n\n/**\n * ProtectedRoute component restricts access to its children components\n * based on user authentication status.\n * \n * @param {React.ReactNode} children - The components or elements to render if authenticated.\n * @returns {React.ReactNode} - The children if authenticated, otherwise a redirect to \"/signin\".\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  // Retrieve JWT token or authentication token from localStorage\n  // This token typically indicates user is logged in\n  const token = localStorage.getItem('token');\n\n  // If token exists (user is authenticated), render the protected components (children)\n  // Otherwise, redirect the user to the \"/signin\" route to log in\n  return token ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/signin\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 29\n  }, this);\n};\n\n// Export ProtectedRoute as default export to use in other parts of app\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","token","localStorage","getItem","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sakshirawat/Desktop/appointment/frontend/src/components/ProtectedRoute.jsx"],"sourcesContent":["// src/components/ProtectedRoute.jsx\n\nimport React from 'react';\n// Import Navigate component from react-router-dom to programmatically redirect users\nimport { Navigate } from 'react-router-dom';\n\n/**\n * ProtectedRoute component restricts access to its children components\n * based on user authentication status.\n * \n * @param {React.ReactNode} children - The components or elements to render if authenticated.\n * @returns {React.ReactNode} - The children if authenticated, otherwise a redirect to \"/signin\".\n */\nconst ProtectedRoute = ({ children }) => {\n  // Retrieve JWT token or authentication token from localStorage\n  // This token typically indicates user is logged in\n  const token = localStorage.getItem('token');\n\n  // If token exists (user is authenticated), render the protected components (children)\n  // Otherwise, redirect the user to the \"/signin\" route to log in\n  return token ? children : <Navigate to=\"/signin\" />;\n};\n\n// Export ProtectedRoute as default export to use in other parts of app\nexport default ProtectedRoute;\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,QAAQ,QAAQ,kBAAkB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACvC;EACA;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA;EACA,OAAOF,KAAK,GAAGD,QAAQ,gBAAGF,OAAA,CAACF,QAAQ;IAACQ,EAAE,EAAC;EAAS;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrD,CAAC;;AAED;AAAAC,EAAA,GAVMV,cAAc;AAWpB,eAAeA,cAAc;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}