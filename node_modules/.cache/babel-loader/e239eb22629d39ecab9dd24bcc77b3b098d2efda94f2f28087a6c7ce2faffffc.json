{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit'; // Redux Toolkit method to create store easily\nimport userReducer from './userSlice'; // Import user slice reducer\n\n// Import redux-persist utilities for persisting Redux state across sessions\nimport { persistStore,\n// Used to create a persistor that controls persistence lifecycle\npersistReducer,\n// Wraps your reducer to enable persistence\nFLUSH,\n// Redux-persist action types used to be ignored by middleware\nREHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // Default storage is localStorage for web\n\n// Configuration object for redux-persist\nconst persistConfig = {\n  key: 'user',\n  // Key name used in localStorage to save the persisted state\n  storage,\n  // Define which storage engine to use (localStorage in this case)\n  whitelist: ['user', 'token', 'loading', 'error'] // Only persist these keys from the user slice state\n  // Note: If your userSlice state shape looks like { user, token, loading, error }, this ensures only these are saved.\n};\n\n// Wrap userReducer with persistReducer to create a persisted reducer\nconst persistedUserReducer = persistReducer(persistConfig, userReducer);\n\n// Create Redux store using Redux Toolkit's configureStore\nexport const store = configureStore({\n  reducer: {\n    user: persistedUserReducer // Register persisted user reducer under 'user' key\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      // Middleware in Redux Toolkit checks that actions & state are serializable by default\n      // redux-persist dispatches some non-serializable actions internally\n      // So we instruct the middleware to ignore these redux-persist specific action types\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\n\n// Create persistor linked to the store, which controls persistence lifecycle (rehydration, purge, etc.)\nexport const persistor = persistStore(store);","map":{"version":3,"names":["configureStore","userReducer","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","persistConfig","key","whitelist","persistedUserReducer","store","reducer","user","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"sources":["/Users/sakshirawat/Desktop/appointmentFrontend/src/store/index.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';  // Redux Toolkit method to create store easily\nimport userReducer from './userSlice';              // Import user slice reducer\n\n// Import redux-persist utilities for persisting Redux state across sessions\nimport {\n  persistStore,      // Used to create a persistor that controls persistence lifecycle\n  persistReducer,    // Wraps your reducer to enable persistence\n  FLUSH,             // Redux-persist action types used to be ignored by middleware\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport storage from 'redux-persist/lib/storage';  // Default storage is localStorage for web\n\n// Configuration object for redux-persist\nconst persistConfig = {\n  key: 'user',         // Key name used in localStorage to save the persisted state\n  storage,             // Define which storage engine to use (localStorage in this case)\n  whitelist: ['user', 'token', 'loading', 'error'], // Only persist these keys from the user slice state\n  // Note: If your userSlice state shape looks like { user, token, loading, error }, this ensures only these are saved.\n};\n\n// Wrap userReducer with persistReducer to create a persisted reducer\nconst persistedUserReducer = persistReducer(persistConfig, userReducer);\n\n// Create Redux store using Redux Toolkit's configureStore\nexport const store = configureStore({\n  reducer: {\n    user: persistedUserReducer,  // Register persisted user reducer under 'user' key\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        // Middleware in Redux Toolkit checks that actions & state are serializable by default\n        // redux-persist dispatches some non-serializable actions internally\n        // So we instruct the middleware to ignore these redux-persist specific action types\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\n// Create persistor linked to the store, which controls persistence lifecycle (rehydration, purge, etc.)\nexport const persistor = persistStore(store);\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB,CAAC,CAAE;AACpD,OAAOC,WAAW,MAAM,aAAa,CAAC,CAAc;;AAEpD;AACA,SACEC,YAAY;AAAO;AACnBC,cAAc;AAAK;AACnBC,KAAK;AAAc;AACnBC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,QAAQ,QACH,eAAe;AAEtB,OAAOC,OAAO,MAAM,2BAA2B,CAAC,CAAE;;AAElD;AACA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EAAU;EACrBF,OAAO;EAAc;EACrBG,SAAS,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAE;EAClD;AACF,CAAC;;AAED;AACA,MAAMC,oBAAoB,GAAGX,cAAc,CAACQ,aAAa,EAAEV,WAAW,CAAC;;AAEvE;AACA,OAAO,MAAMc,KAAK,GAAGf,cAAc,CAAC;EAClCgB,OAAO,EAAE;IACPC,IAAI,EAAEH,oBAAoB,CAAG;EAC/B,CAAC;EACDI,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjB;MACA;MACA;MACAC,cAAc,EAAE,CAACjB,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ;IACpE;EACF,CAAC;AACL,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMa,SAAS,GAAGpB,YAAY,CAACa,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}