{"ast":null,"code":"var _jsxFileName = \"/Users/sakshirawat/Desktop/appointment/frontend/src/pages/Service.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ServicesPage = () => {\n  _s();\n  // State to hold the list of services fetched from the backend\n  const [services, setServices] = useState([]);\n\n  // useEffect hook to fetch services when the component mounts\n  useEffect(() => {\n    // Define an async function to fetch services data\n    const fetchServices = async () => {\n      try {\n        // Retrieve the JWT token from localStorage to authenticate API requests\n        const token = localStorage.getItem('token');\n\n        // Make a GET request to the services API endpoint\n        const response = await fetch(`${process.env.REACT_APP_BASE_URL}/appoint/services`, {\n          headers: {\n            'Content-Type': 'application/json',\n            // Specify JSON response expected\n            Authorization: `Bearer ${token}` // Pass token in Authorization header for protected route\n          }\n        });\n\n        // Parse JSON response\n        const data = await response.json();\n\n        // Update state with services array from response (default to empty array if undefined)\n        setServices(data.services || []);\n      } catch (error) {\n        // Log any errors that occur during fetch\n        console.error('Error fetching services:', error);\n      }\n    };\n\n    // Call the fetch function when component mounts\n    fetchServices();\n  }, []); // Empty dependency array means this runs once on component mount\n\n  return (\n    /*#__PURE__*/\n    // Main container with padding, light gray background, and full viewport height minimum\n    _jsxDEV(\"div\", {\n      className: \"p-6 bg-gray-100 min-h-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-3xl font-bold text-center text-blue-600 mb-8\",\n        children: \"Our Services\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6\",\n        children: services.map((service, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          // Unique key for React list rendering\n          className: \"bg-white p-6 rounded-lg shadow hover:shadow-md transition\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-xl font-semibold text-gray-800 my-4 mx-4\",\n            children: service.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(ServicesPage, \"6zIv7VYIWrxuvR7GDZce08FfVgw=\");\n_c = ServicesPage;\nexport default ServicesPage;\nvar _c;\n$RefreshReg$(_c, \"ServicesPage\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ServicesPage","_s","services","setServices","fetchServices","token","localStorage","getItem","response","fetch","process","env","REACT_APP_BASE_URL","headers","Authorization","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","service","index","name","_c","$RefreshReg$"],"sources":["/Users/sakshirawat/Desktop/appointment/frontend/src/pages/Service.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst ServicesPage = () => {\n  // State to hold the list of services fetched from the backend\n  const [services, setServices] = useState([]);\n\n  // useEffect hook to fetch services when the component mounts\n  useEffect(() => {\n    // Define an async function to fetch services data\n    const fetchServices = async () => {\n      try {\n        // Retrieve the JWT token from localStorage to authenticate API requests\n        const token = localStorage.getItem('token');\n\n        // Make a GET request to the services API endpoint\n        const response = await fetch(`${process.env.REACT_APP_BASE_URL}/appoint/services`, {\n          headers: {\n            'Content-Type': 'application/json',    // Specify JSON response expected\n            Authorization: `Bearer ${token}`,       // Pass token in Authorization header for protected route\n          },\n        });\n\n        // Parse JSON response\n        const data = await response.json();\n\n        // Update state with services array from response (default to empty array if undefined)\n        setServices(data.services || []);\n      } catch (error) {\n        // Log any errors that occur during fetch\n        console.error('Error fetching services:', error);\n      }\n    };\n\n    // Call the fetch function when component mounts\n    fetchServices();\n  }, []); // Empty dependency array means this runs once on component mount\n\n  return (\n    // Main container with padding, light gray background, and full viewport height minimum\n    <div className=\"p-6 bg-gray-100 min-h-screen\">\n      {/* Page title */}\n      <h2 className=\"text-3xl font-bold text-center text-blue-600 mb-8\">\n        Our Services\n      </h2>\n\n      {/* Responsive grid container for service cards: 1 col on small, up to 3 on medium+ */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6\">\n        {/* Iterate over services and render a card for each */}\n        {services.map((service, index) => (\n          <div\n            key={index}                          // Unique key for React list rendering\n            className=\"bg-white p-6 rounded-lg shadow hover:shadow-md transition\"\n          >\n            {/* Service name */}\n            <h3 className=\"text-xl font-semibold text-gray-800 my-4 mx-4\">\n              {service.name}\n            </h3>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ServicesPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;QAE3C;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,mBAAmB,EAAE;UACjFC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAAK;YACvCC,aAAa,EAAE,UAAUT,KAAK,EAAE,CAAQ;UAC1C;QACF,CAAC,CAAC;;QAEF;QACA,MAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;;QAElC;QACAb,WAAW,CAACY,IAAI,CAACb,QAAQ,IAAI,EAAE,CAAC;MAClC,CAAC,CAAC,OAAOe,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;;IAED;IACAb,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;IAAA;IACE;IACAL,OAAA;MAAKoB,SAAS,EAAC,8BAA8B;MAAAC,QAAA,gBAE3CrB,OAAA;QAAIoB,SAAS,EAAC,mDAAmD;QAAAC,QAAA,EAAC;MAElE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAGLzB,OAAA;QAAKoB,SAAS,EAAC,sDAAsD;QAAAC,QAAA,EAElElB,QAAQ,CAACuB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3B5B,OAAA;UACuC;UACrCoB,SAAS,EAAC,2DAA2D;UAAAC,QAAA,eAGrErB,OAAA;YAAIoB,SAAS,EAAC,+CAA+C;YAAAC,QAAA,EAC1DM,OAAO,CAACE;UAAI;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACX;QAAC,GANAG,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOP,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;AAEV,CAAC;AAACvB,EAAA,CA5DID,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AA8DlB,eAAeA,YAAY;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}