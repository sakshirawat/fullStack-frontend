{"ast":null,"code":"var _jsxFileName = \"/Users/sakshirawat/Desktop/appointmentFrontend/src/pages/myAppointment.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport image from '../assets/image1.jpg'; // Placeholder image for doctors or appointment cards\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyAppointments = () => {\n  _s();\n  // State to hold all fetched appointments\n  const [appointments, setAppointments] = useState([]);\n\n  // State to hold the currently selected year filter; default is 'all' (no filter)\n  const [selectedYear, setSelectedYear] = useState('all');\n\n  // Retrieve auth token from localStorage for API requests\n  const token = localStorage.getItem('token');\n\n  // Fetch appointments from the backend when component mounts or token changes\n  useEffect(() => {\n    const fetchAppointments = async () => {\n      try {\n        // Fetch API call with authorization header\n        const res = await fetch(`${process.env.REACT_APP_BASE_URL}/appoint/myAppointments`, {\n          headers: {\n            Authorization: `Bearer ${token}` // Bearer token for authentication\n          }\n        });\n\n        // Parse JSON response\n        const data = await res.json();\n\n        // If response is OK, set appointments state with fetched data\n        if (res.ok) {\n          setAppointments(data.appointments);\n        } else {\n          // Log error message if response not OK\n          console.error('Error fetching appointments:', data.message || data);\n        }\n      } catch (err) {\n        // Log network or fetch errors\n        console.error('Network error fetching appointments:', err);\n      }\n    };\n    fetchAppointments();\n  }, [token]);\n\n  // Extract unique years from appointment dates for the year filter dropdown\n  // Steps:\n  // - Map each appointment to a Date object (use dateTime if available, fallback to date)\n  // - Filter out invalid dates (NaN)\n  // - Extract the year from each valid date\n  // - Convert to Set to keep unique years\n  // - Convert back to Array and sort ascending\n  const years = Array.from(new Set(appointments.map(a => new Date(a.dateTime || a.date)) // Convert appointment date string to Date object\n  .filter(date => !isNaN(date)) // Filter out invalid dates\n  .map(date => date.getFullYear()) // Extract year number\n  )).sort((a, b) => a - b);\n\n  // Filter appointments based on the selected year filter\n  // If 'all' is selected, show all appointments\n  // Otherwise, filter appointments to only those matching the selected year\n  const filteredAppointments = selectedYear === 'all' ? appointments : appointments.filter(a => {\n    const dateObj = new Date(a.dateTime || a.date);\n    return !isNaN(dateObj) && dateObj.getFullYear().toString() === selectedYear;\n  });\n\n  // Handler function to join an appointment by sending a POST request to backend\n  const handleJoin = async (time, doctorId) => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_BASE_URL}/appoint/joinAppointment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          // Set content type to JSON\n          Authorization: `Bearer ${token}` // Auth header with token\n        },\n        body: JSON.stringify({\n          time,\n          // Appointment time to join\n          doctorId // Doctor's ID for the appointment\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        alert('Successfully joined the appointment!');\n        // Optionally, refresh appointments or update UI here\n      } else {\n        alert(data.message || 'Failed to join appointment');\n      }\n    } catch (err) {\n      console.error('Join error:', err);\n      alert('Error joining appointment');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-6xl mx-auto p-4 sm:p-6 md:p-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yearFilter\",\n        className: \"block mb-2 font-semibold text-gray-700\",\n        children: \"Sort by Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"yearFilter\",\n        value: selectedYear,\n        onChange: e => setSelectedYear(e.target.value) // Update selected year state on change\n        ,\n        className: \"block w-48 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: \"All Years\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), years.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: year.toString(),\n          children: year\n        }, year, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-6\",\n      children: filteredAppointments.map(({\n        _id,\n        doctorId,\n        doctorName,\n        doctorDepartment,\n        dateTime,\n        time,\n        date\n      }) => {\n        // Prefer dateTime if available, fallback to date for the appointment date\n        const appointmentDate = dateTime ? new Date(dateTime) : new Date(date);\n\n        // Get today's date at midnight for comparison (only date part)\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n\n        // Check if the appointment date is in the past (before today)\n        const isPast = appointmentDate < today;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white shadow-md rounded-lg overflow-hidden border border-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: image,\n            alt: `Dr. ${doctorName}` // Alt text for accessibility\n            ,\n            className: \"w-full h-48 object-cover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-xl font-semibold mb-1 text-blue-700\",\n              children: doctorName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-600 mb-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: \"Department:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 19\n              }, this), \" \", doctorDepartment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-600\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: \"Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 19\n              }, this), ' ', appointmentDate.toLocaleDateString('en-GB')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-600\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: \"Time:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 19\n              }, this), ' ', time || appointmentDate.toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `px-4 py-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-400 ${isPast ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700 text-white'}`,\n              onClick: () => handleJoin(time || appointmentDate.toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              }), doctorId),\n              disabled: isPast // Disable button if appointment is past\n              ,\n              children: \"Join\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)]\n        }, _id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(MyAppointments, \"yh2GHRzIeEiP7Cg2AWycDRpXIKM=\");\n_c = MyAppointments;\nexport default MyAppointments;\nvar _c;\n$RefreshReg$(_c, \"MyAppointments\");","map":{"version":3,"names":["React","useState","useEffect","image","jsxDEV","_jsxDEV","MyAppointments","_s","appointments","setAppointments","selectedYear","setSelectedYear","token","localStorage","getItem","fetchAppointments","res","fetch","process","env","REACT_APP_BASE_URL","headers","Authorization","data","json","ok","console","error","message","err","years","Array","from","Set","map","a","Date","dateTime","date","filter","isNaN","getFullYear","sort","b","filteredAppointments","dateObj","toString","handleJoin","time","doctorId","method","body","JSON","stringify","alert","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","e","target","year","_id","doctorName","doctorDepartment","appointmentDate","today","setHours","isPast","src","alt","toLocaleDateString","toLocaleTimeString","hour","minute","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/sakshirawat/Desktop/appointmentFrontend/src/pages/myAppointment.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport image from '../assets/image1.jpg';  // Placeholder image for doctors or appointment cards\n\nconst MyAppointments = () => {\n  // State to hold all fetched appointments\n  const [appointments, setAppointments] = useState([]);\n\n  // State to hold the currently selected year filter; default is 'all' (no filter)\n  const [selectedYear, setSelectedYear] = useState('all');\n\n  // Retrieve auth token from localStorage for API requests\n  const token = localStorage.getItem('token');\n\n  // Fetch appointments from the backend when component mounts or token changes\n  useEffect(() => {\n    const fetchAppointments = async () => {\n      try {\n        // Fetch API call with authorization header\n        const res = await fetch(`${process.env.REACT_APP_BASE_URL}/appoint/myAppointments`, {\n          headers: {\n            Authorization: `Bearer ${token}`,  // Bearer token for authentication\n          },\n        });\n\n        // Parse JSON response\n        const data = await res.json();\n\n        // If response is OK, set appointments state with fetched data\n        if (res.ok) {\n          setAppointments(data.appointments);\n        } else {\n          // Log error message if response not OK\n          console.error('Error fetching appointments:', data.message || data);\n        }\n      } catch (err) {\n        // Log network or fetch errors\n        console.error('Network error fetching appointments:', err);\n      }\n    };\n\n    fetchAppointments();\n  }, [token]);\n\n  // Extract unique years from appointment dates for the year filter dropdown\n  // Steps:\n  // - Map each appointment to a Date object (use dateTime if available, fallback to date)\n  // - Filter out invalid dates (NaN)\n  // - Extract the year from each valid date\n  // - Convert to Set to keep unique years\n  // - Convert back to Array and sort ascending\n  const years = Array.from(\n    new Set(\n      appointments\n        .map(a => new Date(a.dateTime || a.date))  // Convert appointment date string to Date object\n        .filter(date => !isNaN(date))              // Filter out invalid dates\n        .map(date => date.getFullYear())            // Extract year number\n    )\n  ).sort((a, b) => a - b);\n\n  // Filter appointments based on the selected year filter\n  // If 'all' is selected, show all appointments\n  // Otherwise, filter appointments to only those matching the selected year\n  const filteredAppointments =\n    selectedYear === 'all'\n      ? appointments\n      : appointments.filter(a => {\n          const dateObj = new Date(a.dateTime || a.date);\n          return !isNaN(dateObj) && dateObj.getFullYear().toString() === selectedYear;\n        });\n\n  // Handler function to join an appointment by sending a POST request to backend\n  const handleJoin = async (time, doctorId) => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_BASE_URL}/appoint/joinAppointment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',          // Set content type to JSON\n          Authorization: `Bearer ${token}`,             // Auth header with token\n        },\n        body: JSON.stringify({\n          time,        // Appointment time to join\n          doctorId,    // Doctor's ID for the appointment\n        }),\n      });\n\n      const data = await res.json();\n\n      if (res.ok) {\n        alert('Successfully joined the appointment!');\n        // Optionally, refresh appointments or update UI here\n      } else {\n        alert(data.message || 'Failed to join appointment');\n      }\n    } catch (err) {\n      console.error('Join error:', err);\n      alert('Error joining appointment');\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-4 sm:p-6 md:p-8\">\n      {/* Year dropdown filter */}\n      <div className=\"mb-6\">\n        <label htmlFor=\"yearFilter\" className=\"block mb-2 font-semibold text-gray-700\">\n          Sort by Year\n        </label>\n        <select\n          id=\"yearFilter\"\n          value={selectedYear}\n          onChange={e => setSelectedYear(e.target.value)}  // Update selected year state on change\n          className=\"block w-48 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400\"\n        >\n          {/* Default option to show all appointments regardless of year */}\n          <option value=\"all\">All Years</option>\n          {/* Dynamically generate options from extracted years */}\n          {years.map(year => (\n            <option key={year} value={year.toString()}>\n              {year}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Appointment Cards Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {filteredAppointments.map(({ _id, doctorId, doctorName, doctorDepartment, dateTime, time, date }) => {\n          // Prefer dateTime if available, fallback to date for the appointment date\n          const appointmentDate = dateTime ? new Date(dateTime) : new Date(date);\n\n          // Get today's date at midnight for comparison (only date part)\n          const today = new Date();\n          today.setHours(0, 0, 0, 0);\n\n          // Check if the appointment date is in the past (before today)\n          const isPast = appointmentDate < today;\n\n          return (\n            <div\n              key={_id}\n              className=\"bg-white shadow-md rounded-lg overflow-hidden border border-gray-200\"\n            >\n              {/* Doctor image - placeholder */}\n              <img\n                src={image}\n                alt={`Dr. ${doctorName}`}  // Alt text for accessibility\n                className=\"w-full h-48 object-cover\"\n              />\n\n              <div className=\"p-4\">\n                {/* Doctor's Name */}\n                <h3 className=\"text-xl font-semibold mb-1 text-blue-700\">{doctorName}</h3>\n\n                {/* Doctor's Department */}\n                <p className=\"text-gray-600 mb-1\">\n                  <span className=\"font-medium\">Department:</span> {doctorDepartment}\n                </p>\n\n                {/* Appointment Date formatted as DD/MM/YYYY */}\n                <p className=\"text-gray-600\">\n                  <span className=\"font-medium\">Date:</span>{' '}\n                  {appointmentDate.toLocaleDateString('en-GB')}\n                </p>\n\n                {/* Appointment Time */}\n                <p className=\"text-gray-600\">\n                  <span className=\"font-medium\">Time:</span>{' '}\n                  {time || appointmentDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                </p>\n\n                {/* Join button: disabled if appointment is in the past */}\n                <button\n                  className={`px-4 py-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-400 ${\n                    isPast\n                      ? 'bg-gray-400 cursor-not-allowed'\n                      : 'bg-blue-600 hover:bg-blue-700 text-white'\n                  }`}\n                  onClick={() =>\n                    handleJoin(\n                      time || appointmentDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n                      doctorId\n                    )\n                  }\n                  disabled={isPast} // Disable button if appointment is past\n                >\n                  Join\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MyAppointments;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}