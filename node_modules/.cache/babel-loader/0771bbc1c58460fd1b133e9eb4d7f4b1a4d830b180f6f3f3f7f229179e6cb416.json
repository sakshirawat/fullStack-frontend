{"ast":null,"code":"var _jsxFileName = \"/Users/sakshirawat/Desktop/appointmentFrontend/src/pages/myAppointment.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport image from '../assets/image1.jpg'; // Placeholder image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyAppointments = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]); // All appointments\n  const [selectedYear, setSelectedYear] = useState('all'); // Year filter\n  const token = localStorage.getItem('token'); // Auth token\n\n  // Fetch appointments on mount\n  useEffect(() => {\n    const fetchAppointments = async () => {\n      try {\n        const res = await fetch(`${process.env.REACT_APP_BASE_URL}/appoint/myAppointments`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          setAppointments(data.appointments);\n        } else {\n          console.error('Error fetching appointments:', data.message || data);\n        }\n      } catch (err) {\n        console.error('Network error fetching appointments:', err);\n      }\n    };\n    if (token) {\n      fetchAppointments();\n    }\n  }, [token]);\n\n  // Extract unique years from appointments\n  const years = Array.from(new Set(appointments.map(a => new Date(a.dateTime || a.date)).filter(date => !isNaN(date)).map(date => date.getFullYear()))).sort((a, b) => a - b);\n\n  // Filter appointments by year\n  const filteredAppointments = selectedYear === 'all' ? appointments : appointments.filter(a => {\n    const dateObj = new Date(a.dateTime || a.date);\n    return !isNaN(dateObj) && dateObj.getFullYear().toString() === selectedYear;\n  });\n\n  // Handle \"Join\" button click\n  const handleJoin = async (time, doctorId) => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_BASE_URL}/appoint/joinAppointment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          time,\n          doctorId\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        alert('Successfully joined the appointment!');\n      } else {\n        alert(data.message || 'Failed to join appointment');\n      }\n    } catch (err) {\n      console.error('Join error:', err);\n      alert('Error joining appointment');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-6xl mx-auto p-4 sm:p-6 md:p-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yearFilter\",\n        className: \"block mb-2 font-semibold text-gray-700\",\n        children: \"Sort by Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"yearFilter\",\n        value: selectedYear,\n        onChange: e => setSelectedYear(e.target.value),\n        className: \"block w-48 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: \"All Years\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), years.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: year.toString(),\n          children: year\n        }, year, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-6\",\n      children: filteredAppointments.map(({\n        _id,\n        doctorId,\n        doctorName,\n        doctorDepartment,\n        dateTime,\n        time,\n        date\n      }) => {\n        // Parse appointment datetime\n        const appointmentDateTime = new Date(dateTime || date);\n        const now = new Date();\n\n        // Normalize dates to midnight for date-only comparisons\n        const appointmentDateOnly = new Date(appointmentDateTime);\n        appointmentDateOnly.setHours(0, 0, 0, 0);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n\n        // Determine if appointment date is past, today, or future\n        const isPastDate = appointmentDateOnly < today;\n        const isFutureDate = appointmentDateOnly > today;\n        const isToday = appointmentDateOnly.getTime() === today.getTime();\n\n        // Determine if appointment time is still in the future (for today's appointments)\n        const isFutureTimeToday = isToday && appointmentDateTime > now;\n\n        // Only allow joining if appointment is today and time is upcoming\n        const canJoin = isFutureTimeToday;\n\n        // Display time â€” use time if valid, else fallback to appointmentDateTime's time\n        // Defensive check for time, since sometimes it may be null/empty\n        const displayTime = time && time.trim().length > 0 ? time : appointmentDateTime.toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white shadow-md rounded-lg overflow-hidden border border-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: image,\n            alt: `Dr. ${doctorName}`,\n            className: \"w-full h-48 object-cover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-xl font-semibold mb-1 text-blue-700\",\n              children: doctorName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-600 mb-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: \"Department:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this), \" \", doctorDepartment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-600\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: \"Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, this), \" \", appointmentDateTime.toLocaleDateString('en-GB')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-600\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: \"Time:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 19\n              }, this), \" \", displayTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `mt-4 px-4 py-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-400 ${canJoin ? 'bg-blue-600 hover:bg-blue-700 text-white cursor-pointer' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`,\n              disabled: !canJoin,\n              onClick: () => {\n                if (isPastDate) {\n                  alert('This appointment date has already passed. You cannot join.');\n                  return;\n                }\n                if (isFutureDate) {\n                  alert(\"You can't join this appointment right now. It is scheduled for a future date.\");\n                  return;\n                }\n                if (!isFutureTimeToday) {\n                  alert('The appointment time has already passed for today.');\n                  return;\n                }\n                handleJoin(displayTime, doctorId);\n              },\n              children: \"Join\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)]\n        }, _id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(MyAppointments, \"yh2GHRzIeEiP7Cg2AWycDRpXIKM=\");\n_c = MyAppointments;\nexport default MyAppointments;\nvar _c;\n$RefreshReg$(_c, \"MyAppointments\");","map":{"version":3,"names":["React","useState","useEffect","image","jsxDEV","_jsxDEV","MyAppointments","_s","appointments","setAppointments","selectedYear","setSelectedYear","token","localStorage","getItem","fetchAppointments","res","fetch","process","env","REACT_APP_BASE_URL","headers","Authorization","data","json","ok","console","error","message","err","years","Array","from","Set","map","a","Date","dateTime","date","filter","isNaN","getFullYear","sort","b","filteredAppointments","dateObj","toString","handleJoin","time","doctorId","method","body","JSON","stringify","alert","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","e","target","year","_id","doctorName","doctorDepartment","appointmentDateTime","now","appointmentDateOnly","setHours","today","isPastDate","isFutureDate","isToday","getTime","isFutureTimeToday","canJoin","displayTime","trim","length","toLocaleTimeString","hour","minute","src","alt","toLocaleDateString","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/sakshirawat/Desktop/appointmentFrontend/src/pages/myAppointment.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport image from '../assets/image1.jpg'; // Placeholder image\n\nconst MyAppointments = () => {\n  const [appointments, setAppointments] = useState([]); // All appointments\n  const [selectedYear, setSelectedYear] = useState('all'); // Year filter\n  const token = localStorage.getItem('token'); // Auth token\n\n  // Fetch appointments on mount\n  useEffect(() => {\n    const fetchAppointments = async () => {\n      try {\n        const res = await fetch(`${process.env.REACT_APP_BASE_URL}/appoint/myAppointments`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        const data = await res.json();\n\n        if (res.ok) {\n          setAppointments(data.appointments);\n        } else {\n          console.error('Error fetching appointments:', data.message || data);\n        }\n      } catch (err) {\n        console.error('Network error fetching appointments:', err);\n      }\n    };\n\n    if (token) {\n      fetchAppointments();\n    }\n  }, [token]);\n\n  // Extract unique years from appointments\n  const years = Array.from(\n    new Set(\n      appointments\n        .map(a => new Date(a.dateTime || a.date))\n        .filter(date => !isNaN(date))\n        .map(date => date.getFullYear())\n    )\n  ).sort((a, b) => a - b);\n\n  // Filter appointments by year\n  const filteredAppointments =\n    selectedYear === 'all'\n      ? appointments\n      : appointments.filter(a => {\n          const dateObj = new Date(a.dateTime || a.date);\n          return !isNaN(dateObj) && dateObj.getFullYear().toString() === selectedYear;\n        });\n\n  // Handle \"Join\" button click\n  const handleJoin = async (time, doctorId) => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_BASE_URL}/appoint/joinAppointment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ time, doctorId }),\n      });\n\n      const data = await res.json();\n\n      if (res.ok) {\n        alert('Successfully joined the appointment!');\n      } else {\n        alert(data.message || 'Failed to join appointment');\n      }\n    } catch (err) {\n      console.error('Join error:', err);\n      alert('Error joining appointment');\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-4 sm:p-6 md:p-8\">\n      {/* Year Filter Dropdown */}\n      <div className=\"mb-6\">\n        <label htmlFor=\"yearFilter\" className=\"block mb-2 font-semibold text-gray-700\">\n          Sort by Year\n        </label>\n        <select\n          id=\"yearFilter\"\n          value={selectedYear}\n          onChange={e => setSelectedYear(e.target.value)}\n          className=\"block w-48 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400\"\n        >\n          <option value=\"all\">All Years</option>\n          {years.map(year => (\n            <option key={year} value={year.toString()}>\n              {year}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Appointment Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {filteredAppointments.map(({ _id, doctorId, doctorName, doctorDepartment, dateTime, time, date }) => {\n          // Parse appointment datetime\n          const appointmentDateTime = new Date(dateTime || date);\n          const now = new Date();\n\n          // Normalize dates to midnight for date-only comparisons\n          const appointmentDateOnly = new Date(appointmentDateTime);\n          appointmentDateOnly.setHours(0, 0, 0, 0);\n\n          const today = new Date();\n          today.setHours(0, 0, 0, 0);\n\n          // Determine if appointment date is past, today, or future\n          const isPastDate = appointmentDateOnly < today;\n          const isFutureDate = appointmentDateOnly > today;\n          const isToday = appointmentDateOnly.getTime() === today.getTime();\n\n          // Determine if appointment time is still in the future (for today's appointments)\n          const isFutureTimeToday = isToday && appointmentDateTime > now;\n\n          // Only allow joining if appointment is today and time is upcoming\n          const canJoin = isFutureTimeToday;\n\n          // Display time â€” use time if valid, else fallback to appointmentDateTime's time\n          // Defensive check for time, since sometimes it may be null/empty\n          const displayTime =\n            time && time.trim().length > 0\n              ? time\n              : appointmentDateTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n\n          return (\n            <div key={_id} className=\"bg-white shadow-md rounded-lg overflow-hidden border border-gray-200\">\n              {/* Doctor Image */}\n              <img src={image} alt={`Dr. ${doctorName}`} className=\"w-full h-48 object-cover\" />\n\n              <div className=\"p-4\">\n                <h3 className=\"text-xl font-semibold mb-1 text-blue-700\">{doctorName}</h3>\n                <p className=\"text-gray-600 mb-1\">\n                  <span className=\"font-medium\">Department:</span> {doctorDepartment}\n                </p>\n                <p className=\"text-gray-600\">\n                  <span className=\"font-medium\">Date:</span> {appointmentDateTime.toLocaleDateString('en-GB')}\n                </p>\n                <p className=\"text-gray-600\">\n                  <span className=\"font-medium\">Time:</span> {displayTime}\n                </p>\n\n                {/* Join Button */}\n                <button\n                  className={`mt-4 px-4 py-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-400 ${\n                    canJoin\n                      ? 'bg-blue-600 hover:bg-blue-700 text-white cursor-pointer'\n                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                  }`}\n                  disabled={!canJoin}\n                  onClick={() => {\n                    if (isPastDate) {\n                      alert('This appointment date has already passed. You cannot join.');\n                      return;\n                    }\n\n                    if (isFutureDate) {\n                      alert(\"You can't join this appointment right now. It is scheduled for a future date.\");\n                      return;\n                    }\n\n                    if (!isFutureTimeToday) {\n                      alert('The appointment time has already passed for today.');\n                      return;\n                    }\n\n                    handleJoin(displayTime, doctorId);\n                  }}\n                >\n                  Join\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MyAppointments;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}