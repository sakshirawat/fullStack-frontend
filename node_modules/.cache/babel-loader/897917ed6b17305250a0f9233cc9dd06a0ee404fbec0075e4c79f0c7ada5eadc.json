{"ast":null,"code":"// src/features/user/userSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\n// Initial state for the user slice of Redux store\nconst initialState = {\n  user: null,\n  // Stores the logged-in user details (e.g., id, name)\n  token: null,\n  // JWT or auth token for authenticated requests\n  loading: false,\n  // Boolean to track if an async login operation is in progress\n  error: null // Stores error messages from failed login attempts\n};\n\n// Create a Redux slice named 'user' using Redux Toolkit's createSlice\nconst userSlice = createSlice({\n  name: 'user',\n  // Name of the slice; will be used as the key in the store\n  initialState,\n  // Initial state object defined above\n  reducers: {\n    // Reducers to handle state changes based on actions\n    // Called when a login process starts (e.g., when user submits login form)\n    loginStart: state => {\n      state.loading = true; // Set loading to true while waiting for server response\n      state.error = null; // Reset any previous error message\n    },\n    // Called when login succeeds and user data + token are received\n    loginSuccess: (state, action) => {\n      state.loading = false; // Stop loading indicator\n      state.user = action.payload.user; // Save user details from payload (e.g., { id, name })\n      state.token = action.payload.token; // Save JWT token from payload for authenticated API calls\n    },\n    // Called when login fails due to wrong credentials or server error\n    loginFailure: (state, action) => {\n      state.loading = false; // Stop loading indicator\n      state.error = action.payload; // Store the error message from payload for showing feedback to user\n    },\n    // Called when user logs out\n    logout: state => {\n      state.user = null; // Clear user info\n      state.token = null; // Clear authentication token\n      state.error = null; // Clear any error messages\n      state.loading = false; // Reset loading flag\n    }\n  }\n});\n\n// Export the action creators generated by createSlice\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout\n} = userSlice.actions;\n\n// Export the reducer to be used in the Redux store\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","user","token","loading","error","userSlice","name","reducers","loginStart","state","loginSuccess","action","payload","loginFailure","logout","actions","reducer"],"sources":["/Users/sakshirawat/Desktop/appointmentFrontend/frontend/src/store/userSlice.js"],"sourcesContent":["// src/features/user/userSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\n// Initial state for the user slice of Redux store\nconst initialState = {\n  user: null,      // Stores the logged-in user details (e.g., id, name)\n  token: null,     // JWT or auth token for authenticated requests\n  loading: false,  // Boolean to track if an async login operation is in progress\n  error: null      // Stores error messages from failed login attempts\n};\n\n// Create a Redux slice named 'user' using Redux Toolkit's createSlice\nconst userSlice = createSlice({\n  name: 'user',           // Name of the slice; will be used as the key in the store\n  initialState,           // Initial state object defined above\n  reducers: {             // Reducers to handle state changes based on actions\n    // Called when a login process starts (e.g., when user submits login form)\n    loginStart: (state) => {\n      state.loading = true;   // Set loading to true while waiting for server response\n      state.error = null;     // Reset any previous error message\n    },\n\n    // Called when login succeeds and user data + token are received\n    loginSuccess: (state, action) => {\n      state.loading = false;          // Stop loading indicator\n      state.user = action.payload.user;   // Save user details from payload (e.g., { id, name })\n      state.token = action.payload.token; // Save JWT token from payload for authenticated API calls\n    },\n\n    // Called when login fails due to wrong credentials or server error\n    loginFailure: (state, action) => {\n      state.loading = false;         // Stop loading indicator\n      state.error = action.payload; // Store the error message from payload for showing feedback to user\n    },\n\n    // Called when user logs out\n    logout: (state) => {\n      state.user = null;     // Clear user info\n      state.token = null;    // Clear authentication token\n      state.error = null;    // Clear any error messages\n      state.loading = false; // Reset loading flag\n    }\n  }\n});\n\n// Export the action creators generated by createSlice\nexport const { loginStart, loginSuccess, loginFailure, logout } = userSlice.actions;\n\n// Export the reducer to be used in the Redux store\nexport default userSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EAAO;EACjBC,KAAK,EAAE,IAAI;EAAM;EACjBC,OAAO,EAAE,KAAK;EAAG;EACjBC,KAAK,EAAE,IAAI,CAAM;AACnB,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC5BO,IAAI,EAAE,MAAM;EAAY;EACxBN,YAAY;EAAY;EACxBO,QAAQ,EAAE;IAAc;IACtB;IACAC,UAAU,EAAGC,KAAK,IAAK;MACrBA,KAAK,CAACN,OAAO,GAAG,IAAI,CAAC,CAAG;MACxBM,KAAK,CAACL,KAAK,GAAG,IAAI,CAAC,CAAK;IAC1B,CAAC;IAED;IACAM,YAAY,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC/BF,KAAK,CAACN,OAAO,GAAG,KAAK,CAAC,CAAU;MAChCM,KAAK,CAACR,IAAI,GAAGU,MAAM,CAACC,OAAO,CAACX,IAAI,CAAC,CAAG;MACpCQ,KAAK,CAACP,KAAK,GAAGS,MAAM,CAACC,OAAO,CAACV,KAAK,CAAC,CAAC;IACtC,CAAC;IAED;IACAW,YAAY,EAAEA,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/BF,KAAK,CAACN,OAAO,GAAG,KAAK,CAAC,CAAS;MAC/BM,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO,CAAC,CAAC;IAChC,CAAC;IAED;IACAE,MAAM,EAAGL,KAAK,IAAK;MACjBA,KAAK,CAACR,IAAI,GAAG,IAAI,CAAC,CAAK;MACvBQ,KAAK,CAACP,KAAK,GAAG,IAAI,CAAC,CAAI;MACvBO,KAAK,CAACL,KAAK,GAAG,IAAI,CAAC,CAAI;MACvBK,KAAK,CAACN,OAAO,GAAG,KAAK,CAAC,CAAC;IACzB;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEK,UAAU;EAAEE,YAAY;EAAEG,YAAY;EAAEC;AAAO,CAAC,GAAGT,SAAS,CAACU,OAAO;;AAEnF;AACA,eAAeV,SAAS,CAACW,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}